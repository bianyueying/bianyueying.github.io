<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/05/04/dan-li-mo-shi/"/>
      <url>/2020/05/04/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式学习笔记"><a href="#单例模式学习笔记" class="headerlink" title="单例模式学习笔记"></a>单例模式学习笔记</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>所谓类的单例模式，就是采取一定的方法在整个软件系统中，对某个类<strong>只能存在一个实例</strong>，并且该类只提供一个取得其对象实例的方法（静态方法）</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>类构造器私有</li><li>持有自己类型的属性</li><li>对外提供获取实例的静态方法</li></ul><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ol><li><strong>饿汉式（静态常量）</strong></li><li><strong>饿汉式（静态代码块）</strong></li><li>懒汉式（线程不安全）</li><li>懒汉式（线程安全，同步方法）</li><li>懒汉式（线程安全，同步代码块）</li><li><strong>双重检查</strong></li><li><strong>静态内部类</strong></li><li><strong>枚举</strong></li></ol><h4 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 饿汉式 静态常量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 1.构造器私有化,则不能通过New关键字来创建对象     */</span>    <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2.本类内部创建对象实例     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Hungry INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 3.提供一个公有的静态方法，返回实例对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hungry instance <span class="token operator">=</span> Hungry<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hungry instance1 <span class="token operator">=</span> Hungry<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：写法简单，在类装载的时候就完成了实例化，避免了线程同步问题。</p><p>缺点：在类装载的时候就完成实例化，无法达到Lazy Loading效果；如果从始至终就木有用过这个类，就会造成内存资源的浪费。</p><h4 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * 饿汉式 静态代码块 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungryStatic</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 1.构造器私有     */</span>    <span class="token keyword">private</span> <span class="token function">HungryStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2.静态代码块 创建实例     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HungryStatic INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungryStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 3.返回实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungryStatic <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HungryStatic instance1 <span class="token operator">=</span> HungryStatic<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HungryStatic instance2 <span class="token operator">=</span> HungryStatic<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优缺点和静态常量一致。</p><h4 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 懒汉式 线程不完全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyOne</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyOne lazy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 提供静态的公有方法     * 当使用到该方法时才去创建该实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyOne <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LazyOne instance1 <span class="token operator">=</span> LazyOne<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyOne instance2 <span class="token operator">=</span> LazyOne<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：起到了懒加载效果，但只在单线程下有效</p><p>缺点：如果在多线程下，线程A通过了非空判断，还未来得及创建实例，这时线程B也通过了非空判断，也要创建实例；这时就会产生多个实例。</p><p>结论：在实际开发中不要使用这种方式。</p><h4 id="懒汉式（线程安全-同步方法）"><a href="#懒汉式（线程安全-同步方法）" class="headerlink" title="懒汉式（线程安全 同步方法）"></a>懒汉式（线程安全 同步方法）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 懒汉式 线程安全 同步方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyTwo lazy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加入同步代码 解决线程不安全问题     * 在第一种的基础上加上 synchronized 关键字     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> LazyTwo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：通过同步以解决线程不安全问题</p><p>缺点：效率低下，每一个线程想获得该类的实例都要进行同步操作，其实getInstance()方法只执行一次实例化就够了，如果后面的线程想获得该实例，可以直接return返回。</p><p>结论：实际开发中，不推荐这种方式。</p><h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheck</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">DoubleCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * volatile作用     * 一旦实例改变就立刻同步到主存中     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> DoubleCheck INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DoubleCheck <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假如两个线程执行到这里</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 线程A，B都通过了非空判断，但只能有一个执行下列代码</span>            <span class="token comment" spellcheck="true">// 比如A进去执行，通过非空判断，创建实例后返回</span>            <span class="token comment" spellcheck="true">// B接着进去后就无法通过非空判断，只能退出,从而保证了对象的单例</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DoubleCheck<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：解决线程安全问题、解决懒加载问题；同时保证了效率，<strong>推荐使用</strong>。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 静态内部类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">StaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StaticInner INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StaticInner <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StaticInner1<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>特点：1.当主类在类装载的时候，其内部类是不会被装载的（保证了懒加载效果）</p><p>​            2.当内部类装载的时候，线程是安全的，而且只会装载一次;<strong>推荐使用</strong></p><p>Final与Static的前后顺序对整个类并无影响。</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span>  EnumTest <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EnumTest instance1 <span class="token operator">=</span> EnumTest<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        EnumTest instance2 <span class="token operator">=</span> EnumTest<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：1.避免多线程同步问题</p><p>​            2.防止反序列化重新创建新的对象；<strong>推荐使用</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/30/hello/"/>
      <url>/2020/04/30/hello/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><p>你好哇，很高兴见到你！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
