<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis缓存</title>
      <link href="/2020/06/23/redis-huan-cun/"/>
      <url>/2020/06/23/redis-huan-cun/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis知识点复习"><a href="#Redis知识点复习" class="headerlink" title="Redis知识点复习"></a>Redis知识点复习</h3><h4 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h4><ul><li><p>非关系型（NoSQL）键值对数据库</p></li><li><p>可存储键和五种不同类型的值之间的映射，键只能是字符串，值有5种数据类型：字符串（String）、列表（list）、集合（set）、散列表（Hash）、有序集合（Zset）。</p></li></ul><h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><p>​    持久化即是内存的数据写到磁盘中去，防止服务宕机，内存数据丢失</p><h5 id="RDB：Redis-DataBase（默认方式）"><a href="#RDB：Redis-DataBase（默认方式）" class="headerlink" title="RDB：Redis DataBase（默认方式）"></a>RDB：Redis DataBase（默认方式）</h5><ul><li>按照一定的时间间隔将内存中的数据以快照的方式保存到硬盘中，产生对应的数据文件为dump.rdb</li><li>优点：<ul><li>只有一个文件，方便持久化</li><li>性能最大化：单独子进程来进行持久化，主线程不会进行任何IO操作，保证性能。</li></ul></li><li>缺点：<ul><li>安全性低：如果持久化时 redis 发生故障，会造成数据丢失（更适合数据要求不严谨时)</li></ul></li></ul><h5 id="AOF：Append-Only-File（需手动开启）"><a href="#AOF：Append-Only-File（需手动开启）" class="headerlink" title="AOF：Append Only File（需手动开启）"></a>AOF：Append Only File（需手动开启）</h5><ul><li><p>将每次Redis执行的命令记录到单独的日志文件中，重启Redis时会根据该文件恢复数据。</p></li><li><p>两种方式同时开启时，数据恢复Redis会优先选择AOF恢复</p></li><li><p>优点：</p><ul><li>数据安全：每执行一次命令就可以记录操作一次。</li></ul></li><li><p>缺点：</p><ul><li><p>因为要记录所有执行命令，所以文件要比rdb大，恢复速度慢</p></li><li><p>数据集大的时候，比rdb启动效率低。</p></li></ul></li></ul><h4 id="Redis主从架构"><a href="#Redis主从架构" class="headerlink" title="Redis主从架构"></a>Redis主从架构</h4><p>主从架构：一主多从，主负责写，并将数据复制到其他的从节点，从负责读。所有的读请求全部走从节点，这样易实现水平扩容，支撑读高并发</p><h4 id="Redis集群数据库"><a href="#Redis集群数据库" class="headerlink" title="Redis集群数据库"></a>Redis集群数据库</h4><p>单个Redis选择数据库用 Select，例如select 0 就是选择第一个数据库</p><p>Redis集群目前无法做数据库选择，默认在0数据库</p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><ul><li><p>指缓存同一时间大面积失效（比如宕机？），后面所有请求都落在数据库上，造成数据库承受大量请求崩溃。</p></li><li><p>解决方案：</p><ul><li><p>设置备用服务器-集群的搭建（土豪的做法）</p></li><li><p>设置数据过期的时间为随机，这样可以防止同时失效</p></li></ul></li></ul><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><ul><li><p>指缓存和数据库中<strong>都没有</strong>的数据，导致所有请求都落在数据库上，造成数据库短时间内承受大量请求崩溃</p></li><li><p>解决方案：</p><ul><li><p>缓存空对象：key-value可写成key-null</p></li><li><p>使用布隆过滤器（一脸蒙圈……）</p></li></ul></li></ul><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><ul><li>缓存中没有<strong>但数据库中有</strong>的数据（一般是缓存时间到期）：比如某一条热搜，在其失效之后，新的缓存还未生成的时间段中，大量请求去数据库中查询，造成数据库压力过大。</li><li>解决方案：<ul><li>设置热点数据永不过期、或者较长时间不过期</li><li>加互斥锁以保证在任意时刻，只能有一个线程访问该对象</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>非原创，系转载</strong>；原创链接：<a href="https://thinkwon.blog.csdn.net/article/details/103522351" target="_blank" rel="noopener">https://thinkwon.blog.csdn.net/article/details/103522351</a></li><li>博主文章里面有些我尚未掌握，这篇文章只记录我学会的东西，方便日后复习。</li><li>后续会添加一些项目实际运用代码，以及哨兵模式</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/05/08/gong-han-mo-shi/"/>
      <url>/2020/05/08/gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式学习笔记"><a href="#工厂模式学习笔记" class="headerlink" title="工厂模式学习笔记"></a>工厂模式学习笔记</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>​            工厂模式有<strong>简单工厂模式</strong>，<strong>工厂方法模式</strong>和<strong>抽象工厂模式</strong>，都属于创建型模式；主要功能是帮助我们把对象的实例化部分抽取出来，以便降低系统中代码耦合度，并增强系统的扩展性。</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><ul><li>实例化对象不使用new，用工厂方法代替</li><li>将选择实现类，创建对象统一管理和控制；从而将调用者跟我们的实现类解耦</li></ul><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li><p>创建一个接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 输出车名     */</span>    <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li><p>编写两个实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wuling</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"五菱宏光"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tesila</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"特斯拉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="3"><li><p>创建一个工厂,根据提供的消息返回特定的对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建一个工厂，生成基于给定信息的实体类的对象     * 此处使用静态方法 其它类就可以直接使用 类名.方法 直接调用     * 如果不加 static 则需要先创建该工厂对象 再调用对象的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Car <span class="token function">get</span><span class="token punctuation">(</span>String car<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"五菱"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wuling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"特斯拉"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tesila</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>使用工厂，通过传递类型信息来获取实体类的对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car car1 <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"五菱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car car2 <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"特斯拉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car1<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car2<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>该模式优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责</li><li>其缺点是工厂类不够灵活，增加新的具体产品就需要修改工厂类的判断逻辑代码（不符合开闭原则），而且产品较多时，工厂方法代码逻辑将会非常复杂</li></ul><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>一句话：软件对象（类、模块、方法等）应该对于扩展开放，对修改关闭。</p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ol><li><p>创建一个接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 输出车名     */</span>    <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li><p>编写实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tesila</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"特斯拉车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre></li></ol><ol start="3"><li><p>创建一个工厂接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    Car <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="4"><li><p>编写实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TesilaFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tesila</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="5"><li><p>使用工厂</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Custormer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WulingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="6"><li><p>扩展如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1.新增汽车实现汽车接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dazhong</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大众汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.新增汽车工厂实现汽车工厂接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DazhongFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dazhong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MethodFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Custormer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WulingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.使用新增的汽车工厂创建对象</span>        Car car2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DazhongFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car2<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>​        此模式中，通过定义一个抽象的核心工厂类，并定义创建产品对象的接口，创建具体产品实例的工作延迟到其工厂子类去完成。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>核心类只关注工厂类的接口定义，而具体的产品实例交给具体的工厂子类去创建。</li><li>当系统需新增一个产品时，无需修改原有代码，只需添加一个具体产品类和其对应的工厂子类即可。</li><li>增强系统的扩展性，符合面向对象编程的开闭原则。</li></ul><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​        提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类（围绕一个超级工厂创建其他工厂；又称之为其他工厂的工厂）</p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> byb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1.创建一个手机接口 包含开机和打电话</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> byb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.华为手机实现接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Huawei</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> byb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.小米手机也实现接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Xiaomi</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> byb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.创建抽象工厂 定义生产手机接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CreateFactory</span> <span class="token punctuation">{</span>    Phone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> byb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5.华为创建抽象工厂实现类 实现生产华为手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaweiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CreateFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Huawei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> byb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 6.小米创建抽象工厂实现类 实现生产小米手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CreateFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Xiaomi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> byb<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 7.使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        XiaomiFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HuaweiFactory huaweiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone phone1 <span class="token operator">=</span> huaweiFactory<span class="token punctuation">.</span><span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>具体产品在应用层代码隔离，无须关心创建细节</li><li>将一系列的产品族统一到一起创建</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>规定了所有可能被创建的产品集合，如果想在产品族中扩展新的产品则需要修改大量代码(违反开闭原则)；适合接口里的内容长期稳定不变。</li><li>增加了系统的抽象性和理解难度</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/05/04/dan-li-mo-shi/"/>
      <url>/2020/05/04/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式学习笔记"><a href="#单例模式学习笔记" class="headerlink" title="单例模式学习笔记"></a>单例模式学习笔记</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>所谓类的单例模式，就是采取一定的方法在整个软件系统中，对某个类<strong>只能存在一个实例</strong>，并且该类只提供一个取得其对象实例的方法（静态方法）</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>类构造器私有</li><li>持有自己类型的属性</li><li>对外提供获取实例的静态方法</li></ul><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ol><li><strong>饿汉式（静态常量）</strong></li><li><strong>饿汉式（静态代码块）</strong></li><li>懒汉式（线程不安全）</li><li>懒汉式（线程安全，同步方法）</li><li>懒汉式（线程安全，同步代码块）</li><li><strong>双重检查</strong></li><li><strong>静态内部类</strong></li><li><strong>枚举</strong></li></ol><h4 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 饿汉式 静态常量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 1.构造器私有化,则不能通过New关键字来创建对象     */</span>    <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2.本类内部创建对象实例     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Hungry INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 3.提供一个公有的静态方法，返回实例对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hungry instance <span class="token operator">=</span> Hungry<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hungry instance1 <span class="token operator">=</span> Hungry<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：写法简单，在类装载的时候就完成了实例化，避免了线程同步问题。</p><p>缺点：在类装载的时候就完成实例化，无法达到Lazy Loading效果；如果从始至终就木有用过这个类，就会造成内存资源的浪费。</p><h4 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * * 饿汉式 静态代码块 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungryStatic</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 1.构造器私有     */</span>    <span class="token keyword">private</span> <span class="token function">HungryStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2.静态代码块 创建实例     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HungryStatic INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungryStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 3.返回实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungryStatic <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HungryStatic instance1 <span class="token operator">=</span> HungryStatic<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HungryStatic instance2 <span class="token operator">=</span> HungryStatic<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优缺点和静态常量一致。</p><h4 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 懒汉式 线程不完全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyOne</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyOne lazy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 提供静态的公有方法     * 当使用到该方法时才去创建该实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyOne <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LazyOne instance1 <span class="token operator">=</span> LazyOne<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyOne instance2 <span class="token operator">=</span> LazyOne<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：起到了懒加载效果，但只在单线程下有效</p><p>缺点：如果在多线程下，线程A通过了非空判断，还未来得及创建实例，这时线程B也通过了非空判断，也要创建实例；这时就会产生多个实例。</p><p>结论：在实际开发中不要使用这种方式。</p><h4 id="懒汉式（线程安全-同步方法）"><a href="#懒汉式（线程安全-同步方法）" class="headerlink" title="懒汉式（线程安全 同步方法）"></a>懒汉式（线程安全 同步方法）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 懒汉式 线程安全 同步方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyTwo lazy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加入同步代码 解决线程不安全问题     * 在第一种的基础上加上 synchronized 关键字     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> LazyTwo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：通过同步以解决线程不安全问题</p><p>缺点：效率低下，每一个线程想获得该类的实例都要进行同步操作，其实getInstance()方法只执行一次实例化就够了，如果后面的线程想获得该实例，可以直接return返回。</p><p>结论：实际开发中，不推荐这种方式。</p><h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheck</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">DoubleCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * volatile作用     * 一旦实例改变就立刻同步到主存中     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> DoubleCheck INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DoubleCheck <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假如两个线程执行到这里</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 线程A，B都通过了非空判断，但只能有一个执行下列代码</span>            <span class="token comment" spellcheck="true">// 比如A进去执行，通过非空判断，创建实例后返回</span>            <span class="token comment" spellcheck="true">// B接着进去后就无法通过非空判断，只能退出,从而保证了对象的单例</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DoubleCheck<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：解决线程安全问题、解决懒加载问题；同时保证了效率，<strong>推荐使用</strong>。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 静态内部类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">StaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StaticInner INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StaticInner <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StaticInner1<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>特点：1.当主类在类装载的时候，其内部类是不会被装载的（保证了懒加载效果）</p><p>​            2.当内部类装载的时候，线程是安全的，而且只会装载一次;<strong>推荐使用</strong></p><p>Final与Static的前后顺序对整个类并无影响。</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> bml<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span>  EnumTest <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EnumTest instance1 <span class="token operator">=</span> EnumTest<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        EnumTest instance2 <span class="token operator">=</span> EnumTest<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优点：1.避免多线程同步问题</p><p>​            2.防止反序列化重新创建新的对象；<strong>推荐使用</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/30/hello/"/>
      <url>/2020/04/30/hello/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><p>你好哇，很高兴见到你！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
